name: Security Scanning

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * 0'  # Weekly security scan on Sundays at 2 AM

jobs:
  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov

      - name: Run tests for SonarQube
        run: |
          pytest tests/ \
            --cov=app \
            --cov-report=xml \
            --cov-report=lcov \
            --junitxml=test-results.xml

      - name: SonarQube Scan
        uses: sonarqube/sonarqube-github-action@v2.3.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

      - name: SonarQube Quality Gate Check
        uses: sonarqube/sonarqube-quality-gate-action@v1.3.0
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

  owasp-dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        id: depcheck
        with:
          project: 'currency-converter'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --failOnCVSS 7
            --suppression dependency-check-suppressions.xml

      - name: Upload OWASP results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: owasp-dependency-check-results
          path: reports/

  secret-scanning:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@v3.81.9
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  container-security-deep:
    name: Advanced Container Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: currency-converter:security-scan
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy comprehensive scan
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: 'currency-converter:security-scan'
          format: 'json'
          output: 'trivy-comprehensive.json'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'trivy-filesystem.json'

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        with:
          image: 'currency-converter:security-scan'
          fail-build: false
          severity-cutoff: high

      - name: Run Syft SBOM generation
        uses: anchore/sbom-action@v0
        with:
          image: 'currency-converter:security-scan'
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: container-security-results
          path: |
            trivy-comprehensive.json
            trivy-filesystem.json
            sbom.spdx.json

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install pip-licenses
        run: pip install pip-licenses

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Generate license report
        run: |
          pip-licenses --format=json --output-file=licenses.json
          pip-licenses --format=csv --output-file=licenses.csv
          pip-licenses --format=html --output-file=licenses.html

      - name: Check for problematic licenses
        run: |
          # Check for GPL licenses that might cause issues
          if pip-licenses | grep -i "GPL\|AGPL\|LGPL"; then
            echo "GPL-based licenses detected. Please review for compatibility."
            echo "GPL_DETECTED=true" >> $GITHUB_ENV
          else
            echo "No problematic licenses detected."
            echo "GPL_DETECTED=false" >> $GITHUB_ENV
          fi

      - name: Upload license reports
        uses: actions/upload-artifact@v3
        with:
          name: license-reports
          path: |
            licenses.json
            licenses.csv
            licenses.html

  compliance-security:
    name: Compliance & Security Policies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Open Policy Agent (OPA) Conftest
        run: |
          # Install conftest
          wget https://github.com/open-policy-agent/conftest/releases/latest/download/conftest_Linux_x86_64.tar.gz
          tar xzf conftest_Linux_x86_64.tar.gz
          sudo mv conftest /usr/local/bin
          
          # Run conftest on Dockerfile
          conftest verify --policy security-policies/ Dockerfile || echo "Dockerfile policy check completed"
          
          # Run conftest on Kubernetes manifests
          helm template test helm/currency-converter/ > k8s-manifests.yaml
          conftest verify --policy security-policies/ k8s-manifests.yaml || echo "Kubernetes policy check completed"

      - name: Kubernetes Security with Kubesec
        run: |
          wget https://github.com/controlplaneio/kubesec/releases/latest/download/kubesec_linux_amd64.tar.gz
          tar -xf kubesec_linux_amd64.tar.gz
          ./kubesec scan helm/currency-converter/templates/deployment.yaml > kubesec-results.json || true

      - name: Upload compliance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: compliance-results
          path: kubesec-results.json

  security-report:
    name: Security Report Summary
    runs-on: ubuntu-latest
    needs: [sonarqube, owasp-dependency-check, secret-scanning, container-security-deep, license-compliance, compliance-security]
    if: always()
    steps:
      - name: Download all security artifacts
        uses: actions/download-artifact@v3

      - name: Generate Security Dashboard
        run: |
          echo "# Security Scanning Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Scans Performed" >> $GITHUB_STEP_SUMMARY
          echo "| Tool | Purpose | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|---------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| SonarQube | Code Quality & Security | ${{ needs.sonarqube.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| OWASP Dependency Check | Vulnerability Database | ${{ needs.owasp-dependency-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| GitLeaks | Secret Detection | ${{ needs.secret-scanning.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Trivy | Container Vulnerabilities | ${{ needs.container-security-deep.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Grype | Vulnerability Scanner | ${{ needs.container-security-deep.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| License Check | OSS Compliance | ${{ needs.license-compliance.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Kubesec | K8s Security | ${{ needs.compliance-security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Security Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- **OWASP Report**: `owasp-dependency-check-results/`" >> $GITHUB_STEP_SUMMARY
          echo "- **Container Scans**: `container-security-results/`" >> $GITHUB_STEP_SUMMARY
          echo "- **SBOM**: `container-security-results/sbom.spdx.json`" >> $GITHUB_STEP_SUMMARY
          echo "- **License Report**: `license-reports/`" >> $GITHUB_STEP_SUMMARY
          echo "- **Compliance**: `compliance-results/`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Security Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "1. Review all HIGH and CRITICAL vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "2. Ensure no secrets are committed to the repository" >> $GITHUB_STEP_SUMMARY
          echo "3. Validate license compatibility for production use" >> $GITHUB_STEP_SUMMARY
          echo "4. Follow Kubernetes security best practices" >> $GITHUB_STEP_SUMMARY

      - name: Comment PR with Security Summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## Security Scan Summary\n\nSecurity scans have been completed for this PR. Please review the security artifacts in the Actions tab.\n\n**Key Security Tools:**\n- SonarQube Code Analysis\n- OWASP Dependency Check\n- Container Vulnerability Scanning\n- Secret Detection\n- License Compliance Check\n\n**Full Report**: Check the Security Scanning workflow for detailed results.'
            })
